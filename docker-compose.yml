services:
  flights-service:
    build:
      context: ./FlightsApp/Backend/Flights
      dockerfile: Dockerfile
    restart: always
    container_name: "flights-service"
    hostname: "flights-service"   
    ports:
      - 5010:443
      - 5011:80
    environment:
      - MONGO_DB_URI=mongodb://root:pass@flights_db:27018
      - MONGO_DB_NAME=XWS_Projekat
      - ASPNETCORE_HTTPS_PORT=5010
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - C:\Users\User\.aspnet\https:/https/
    depends_on:
      flights_db:
        condition: service_healthy
  
  flights_db:
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: XWS_Projekat
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - flights_store:/data/db

  flight-recommendation-service:
    build:
      context: ./AccommodationApp\Backend\AccommodationSolution\FlightRecommendationService
      dockerfile: Dockerfile
    restart: always
    container_name: "flight-recommendation-service"
    hostname: "flight-recommendation-service"   
    ports:  
      - 5005:80
    environment:     
      - ASPNETCORE_HTTPS_PORT=5005
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - C:\Users\User\.aspnet\https:/https/

  accommodation-service:
    build:
      context: ./AccommodationApp\Backend\AccommodationSolution\AccommodationService
      dockerfile: Dockerfile
    restart: always
    container_name: "accommodation-service"
    hostname: "accommodation-service"   
    ports:  
      - 5002:80
    environment:     
      - ASPNETCORE_HTTPS_PORT=5002
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - C:\Users\User\.aspnet\https:/https/
    depends_on:
      accommodation_db:
        condition: service_healthy

  accommodation_db:
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: XWS_Projekat
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - accommodation_store:/data/db

  reservation-service:
    build:
      context: ./AccommodationApp\Backend\AccommodationSolution\ReservationService
      dockerfile: Dockerfile
    restart: always
    container_name: "reservation-service"
    hostname: "reservation-service"   
    ports:  
      - 5003:80
    environment:     
      - ASPNETCORE_HTTPS_PORT=5003
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - C:\Users\User\.aspnet\https:/https/
    depends_on:
      reservation_db:
        condition: service_healthy

  reservation_db:
    image: postgres:15.0-alpine
    restart: always
    ports:
      - "27020:5432"
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=password   
      - POSTGRES_DB=XWSReservationDatabase  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5 
    volumes:
      - reservation_store:/data/db    

  user-service:
    build:
      context: ./AccommodationApp\Backend\AccommodationSolution\UserService
      dockerfile: Dockerfile
    restart: always
    container_name: "user-service"
    hostname: "user-service"   
    ports:  
      - 5001:80
    environment:     
      - ASPNETCORE_HTTPS_PORT=5001
      - ASPNETCORE_Kestrel__Certificates__Default__Password=password
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
    volumes:
      - C:\Users\User\.aspnet\https:/https/
    depends_on:
      user_db:
        condition: service_healthy

  user_db:
    image: postgres:15.0-alpine
    restart: always
    ports:
      - "27021:5432"
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=password   
      - POSTGRES_DB=XWSUserDatabase
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5 
    volumes:
      - user_store:/data/db 

volumes:
  flights_store:
  accommodation_store:
  reservation_store:
  user_store: